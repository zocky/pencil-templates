{
  var NOP = 'function(){return ""}';
  function STR(s) {
    return JSON.stringify(String(s));
  }
  
  function APPLY(fn) {
    return new Function('data','return ('+fn+').apply(data)');
  }
  
  function FN(fn) {
    return APPLY('function(){with(Pencil){return ('+fn+')}}');
  }
  function TMPL(name,fn) {
    return APPLY('function(){var tmpl='+STR(name)+'; with(Pencil){return ('+fn+')}}');
  }
  
  function ERR(msg,off) {
    throw {
      message: msg,
      offset: off,
    }
  }
}


/* PARTS */

file = p:pieces { return p || []}

pieces = p:piece+ { return p;}

piece = part / junk

part 
  = b:begin_part s:source? e:must_end_part {
      e = e.toLowerCase(); b.type = b.type.toLowerCase();
      if (e != b.type) ERR('</'+e+'> does not match <'+b.type+'>',pos);
      if (b.type != 'template' && b.name !== undefined) ERR('only templates can have names');
      b.source = b.name ? TMPL(b.name,s) : FN(s);
      b.source = String(b.source);
      return b;
    }

begin_part = OPEN_TAG b:begin_part_type CLOSE_TAG { return b; }
end_part = OPEN_END_TAG e:end_part_type CLOSE_TAG { return e; } 
must_end_part = end_part / { ERR('unclosed part',pos) }

begin_part_type
  = "head"i {
    return {type:'head'}
  }
  / "body"i {
    return {type:'body'}
  } 
  / "template"i n:part_name {
    return {type:'template',name:n}
  }
part_name = $ "name" $ "=" $ '"' c:[^"]* '"' { return c.join('')}
end_part_type = "head"i / "body"i / "template"

OPEN_TAG "opentag" = "<" $
OPEN_END_TAG = '<' $ '/' $
CLOSE_TAG = $ '>' / { ERR('expected >',pos); }

junk = 
  (!begin_part .)+ { 
    return {type:'junk'}; 
  }

/* MAIN */

source 
  = c:chunk+ { 
    return c.join(' + ');
  }

chunk = element / text

/* TEXT */

text "text"
  = c:ctext+ { console.log(c.join('')); return STR(c.join('')); }
ctext = !LEFT !end_part c:. { return c; } 


/* ELEMENTS */
element
  = block 
  / comment
  / partial
  / call 
  / raw
  / !else i:include { return i; }

comment
  = LEFT '!--' cmstring "--" RIGHT { return '""'; }

cmstring = c: ccmstring * { return c.join(''); }
ccmstring = !("--" RIGHT) c:. { return c; }

raw "raw"
  = LEFT3 v:value RIGHT3 { return '(' + v + ')'; }

include "include"
  = LEFT v:value RIGHT { return 'ESC(' + v + ')'; } 

value "value" = helper / single

single "single" = $ e:expr { return e;}

helper "helper"
  = $ e:ident a:args &{ return a.length>5} { return 'HELPER(tmpl,this,' + STR(e) + ','+a+')'; }


partial "partial"
  = LEFT '>' $ a:ident args:args $ RIGHT { 
    return "PARTIAL(tmpl,this,"+STR(a)+","+args+")";
  }

call "call"
  = LEFT ':' $ a:ident args:args $ RIGHT { 
    return "CALL(tmpl,this,"+STR(a)+","+args+")";
  }

block "block"
  = OPEN o:ident v:value? RIGHT t:source? e:else? c:close &{ 
      return o == c || ERR('{{/'+c+'}} does not match {{#'+o+'}}',pos);
    } {
    return "BLOCK(tmpl,this,"+STR(o)+","+(t?FN(t):NOP)+"," + (e?FN(e):NOP)+"," + v + ")";
  }
close "close"
  = CLOSE i:ident RIGHT { 
    return i;
  }
else "else"
  = ELSE s:source { 
    return s; 
  }

/* ARGS */
args 
  = n:numbered nn:named { 
    console.log(nn,n);
    return nn + ',' + n;
  }
numbered 
  = n:_numbered* { 
    return '[' + n.join(',') + ']';
  }
_numbered 
  = !_named _ e:expr { 
    return e;
  };
named 
  = n:_named* { 
    return '{' + n.join(',') + '}';
  }
_named 
  = _ i:ident $ '=' $ e:expr { 
    return STR(i)+ ':' + e; 
  }

/* TOKENS */
LEFT = '{{' $ 
RIGHT = $ '}}'
LEFT3 = '{{{' $ 
RIGHT3 = $ '}}}'
OPEN = LEFT '#' $
CLOSE = LEFT '/' $
CALL = LEFT ':' $
INCLUDE = LEFT '>' $
ELSE = LEFT $ 'else' $ RIGHT

/****************************/

/* EXPR */
expr 
  = a:atom e:_expr * {
    return a + e.join('');
  }
_expr 
  = $ o:OP $ a:atom { 
    return (o+a); 
  }

atom "atom"
  = l:LOP $ a:atom {
    return l + a;
  }
  / "null"
  / "undefined"
  / "true"
  / "false"
  / par
  / fncall
  / number 
  / string
  / array
  / object
  / path

fncall
  = p:path "(" $ h:expr ? a:fnarg* $ CLOSEPAR { 
    return p+'('+ [h].concat(a).map(function(n){
      if (n=='') return 'undefined';
      return n;
    }).join(',')+')';
  }
fnarg 
  = $ ',' $ a:expr? { return a}


/* STEP */
par "par"
  = '(' $ e:expr $ CLOSEPAR {
    return '(' + e + ')';
  }
step "step"
  = i:ident { return STR(i); } / par

CLOSEPAR 
  = ')' / . { 
    ERR('unclosed (',pos)
  }
/* PATH */  
path 
  = THIS p:_path + { 
    return 'GET(tmpl,this,' + p.join(',') + ')';
  } 
  / i:ident p:_path + { 
    return 'GET(tmpl,this,' + STR(i) + ',' + p.join(',') + ')';
  } 
  / THIS {
    return 'GET(tmpl,this)';
  }
  / i:ident {
    return 'GET(tmpl,this,' + STR(i) + ')';
  }
_path
  = $ '.' s:bstring {
    return STR(s);
  }
  / '[' $ e:expr $ ']' { 
    return e; 
  }
  / $ '.' $ i:step { 
    return i;
  }
  
/* TOKENS */
OP 
  = '++' / '--' 
  / '===' / '!==' 
  / '==' / '!=' / '<=' / '>=' 
  / '||' / '&&' 
  / [+\-*/?:%<>]
LOP = [~\-+!]
THIS = 'this'
$ = [ \n\t]*
_ = [ \n\t]+

/* LITERALS */
array = '[' h:expr? a:_array* ']' { return '[' + [h].concat(a).join('') + ']'}
_array = a:(',' expr?) { return a.join('')}

object = '{' $ a:_object* b:__object? $ '}' { return '{' + (b ? a.concat(b) : a).join(',') + '}'} 
_object = l:label $ ':' $ e:expr $ ',' { return l+':'+e }
__object = l:label $ ':' $ e:expr  { return l+':'+e }
label = ident / string
number = a:digits b:('.' digits)? { return b ? a + '.' + b[1] : a }
digits = d:[0-9]+  { return d.join('')}
string = s:(sstring / dstring) { return STR(s)}
special = [\t] {return '\\t'} / [\n] {return '\\n'}
sstring = ['] s:csstring* ['] {return s.join('')}
csstring = special / "\\'" / (c:[^'] {return c})
dstring = ["] s:cdstring* ["] {return s.join('')}
cdstring = special / '\\"' / (c:[^"] {return c})
bstring = '[' s:cbstring* ']' {return s.join('')}
cbstring = special / '\\]' / (c:[^\]] {return c})
ident = ![0-9] c:[a-zA-Z0-9_$]+ {return c.join('')}{
  var NOP = 'function(){return ""}';
  function STR(s) {
    return JSON.stringify(String(s));
  }
  
  function APPLY(fn) {
    return new Function('data','return ('+fn+').apply(data)');
  }
  
  function FN(fn) {
    return APPLY('function(){with(Pencil){return ('+fn+')}}');
  }
  function TMPL(name,fn) {
    return APPLY('function(){var tmpl='+STR(name)+'; with(Pencil){return ('+fn+')}}');
  }
  
  function ERR(msg,off) {
    throw {
      message: msg,
      offset: off,
    }
  }
}


/* PARTS */

file = p:pieces { return p || []}

pieces = p:piece+ { return p;}

piece = part / junk

part 
  = b:begin_part s:source? e:must_end_part {
      e = e.toLowerCase(); b.type = b.type.toLowerCase();
      if (e != b.type) ERR('</'+e+'> does not match <'+b.type+'>',pos);
      if (b.type != 'template' && b.name !== undefined) ERR('only templates can have names');
      b.source = b.name ? TMPL(b.name,s) : FN(s);
      b.source = String(b.source);
      return b;
    }

begin_part = OPEN_TAG b:begin_part_type CLOSE_TAG { return b; }
end_part = OPEN_END_TAG e:end_part_type CLOSE_TAG { return e; } 
must_end_part = end_part / { ERR('unclosed part',pos) }

begin_part_type
  = "head"i {
    return {type:'head'}
  }
  / "body"i {
    return {type:'body'}
  } 
  / "template"i n:part_name {
    return {type:'template',name:n}
  }
part_name = $ "name" $ "=" $ '"' c:[^"]* '"' { return c.join('')}
end_part_type = "head"i / "body"i / "template"

OPEN_TAG "opentag" = "<" $
OPEN_END_TAG = '<' $ '/' $
CLOSE_TAG = $ '>' / { ERR('expected >',pos); }

junk = 
  (!begin_part .)+ { 
    return {type:'junk'}; 
  }

/* MAIN */

source 
  = c:chunk+ { 
    return c.join(' + ');
  }

chunk = element / text

/* TEXT */

text "text"
  = c:ctext+ { console.log(c.join('')); return STR(c.join('')); }
ctext = !LEFT !end_part c:. { return c; } 


/* ELEMENTS */
element
  = block 
  / comment
  / partial
  / call 
  / raw
  / !else i:include { return i; }

comment
  = LEFT '!--' cmstring "--" RIGHT { return '""'; }

cmstring = c: ccmstring * { return c.join(''); }
ccmstring = !("--" RIGHT) c:. { return c; }

raw "raw"
  = LEFT3 v:value RIGHT3 { return '(' + v + ')'; }

include "include"
  = LEFT v:value RIGHT { return 'ESC(' + v + ')'; } 

value "value" = helper / single

single "single" = $ e:expr { return e;}

helper "helper"
  = $ e:ident a:args &{ return a.length>5} { return 'HELPER(tmpl,this,' + STR(e) + ','+a+')'; }


partial "partial"
  = LEFT '>' $ a:ident args:args $ RIGHT { 
    return "PARTIAL(tmpl,this,"+STR(a)+","+args+")";
  }

call "call"
  = LEFT ':' $ a:ident args:args $ RIGHT { 
    return "CALL(tmpl,this,"+STR(a)+","+args+")";
  }

block "block"
  = OPEN o:ident v:value? RIGHT t:source? e:else? c:close &{ 
      return o == c || ERR('{{/'+c+'}} does not match {{#'+o+'}}',pos);
    } {
    return "BLOCK(tmpl,this,"+STR(o)+","+(t?FN(t):NOP)+"," + (e?FN(e):NOP)+"," + v + ")";
  }
close "close"
  = CLOSE i:ident RIGHT { 
    return i;
  }
else "else"
  = ELSE s:source { 
    return s; 
  }

/* ARGS */
args 
  = n:numbered nn:named { 
    console.log(nn,n);
    return nn + ',' + n;
  }
numbered 
  = n:_numbered* { 
    return '[' + n.join(',') + ']';
  }
_numbered 
  = !_named _ e:expr { 
    return e;
  };
named 
  = n:_named* { 
    return '{' + n.join(',') + '}';
  }
_named 
  = _ i:ident $ '=' $ e:expr { 
    return STR(i)+ ':' + e; 
  }

/* TOKENS */
LEFT = '{{' $ 
RIGHT = $ '}}'
LEFT3 = '{{{' $ 
RIGHT3 = $ '}}}'
OPEN = LEFT '#' $
CLOSE = LEFT '/' $
CALL = LEFT ':' $
INCLUDE = LEFT '>' $
ELSE = LEFT $ 'else' $ RIGHT

/****************************/

/* EXPR */
expr 
  = a:atom e:_expr * {
    return a + e.join('');
  }
_expr 
  = $ o:OP $ a:atom { 
    return (o+a); 
  }

atom "atom"
  = l:LOP $ a:atom {
    return l + a;
  }
  / "null"
  / "undefined"
  / "true"
  / "false"
  / par
  / fncall
  / number 
  / string
  / array
  / object
  / path

fncall
  = p:path "(" $ h:expr ? a:fnarg* $ CLOSEPAR { 
    return p+'('+ [h].concat(a).map(function(n){
      if (n=='') return 'undefined';
      return n;
    }).join(',')+')';
  }
fnarg 
  = $ ',' $ a:expr? { return a}


/* STEP */
par "par"
  = '(' $ e:expr $ CLOSEPAR {
    return '(' + e + ')';
  }
step "step"
  = i:ident { return STR(i); } / par

CLOSEPAR 
  = ')' / . { 
    ERR('unclosed (',pos)
  }
/* PATH */  
path 
  = THIS p:_path + { 
    return 'GET(tmpl,this,' + p.join(',') + ')';
  } 
  / i:ident p:_path + { 
    return 'GET(tmpl,this,' + STR(i) + ',' + p.join(',') + ')';
  } 
  / THIS {
    return 'GET(tmpl,this)';
  }
  / i:ident {
    return 'GET(tmpl,this,' + STR(i) + ')';
  }
_path
  = $ '.' s:bstring {
    return STR(s);
  }
  / '[' $ e:expr $ ']' { 
    return e; 
  }
  / $ '.' $ i:step { 
    return i;
  }
  
/* TOKENS */
OP 
  = '++' / '--' 
  / '===' / '!==' 
  / '==' / '!=' / '<=' / '>=' 
  / '||' / '&&' 
  / [+\-*/?:%<>]
LOP = [~\-+!]
THIS = 'this'
$ = [ \n\t]*
_ = [ \n\t]+

/* LITERALS */
array = '[' h:expr? a:_array* ']' { return '[' + [h].concat(a).join('') + ']'}
_array = a:(',' expr?) { return a.join('')}

object = '{' $ a:_object* b:__object? $ '}' { return '{' + (b ? a.concat(b) : a).join(',') + '}'} 
_object = l:label $ ':' $ e:expr $ ',' { return l+':'+e }
__object = l:label $ ':' $ e:expr  { return l+':'+e }
label = ident / string
number = a:digits b:('.' digits)? { return b ? a + '.' + b[1] : a }
digits = d:[0-9]+  { return d.join('')}
string = s:(sstring / dstring) { return STR(s)}
special = [\t] {return '\\t'} / [\n] {return '\\n'}
sstring = ['] s:csstring* ['] {return s.join('')}
csstring = special / "\\'" / (c:[^'] {return c})
dstring = ["] s:cdstring* ["] {return s.join('')}
cdstring = special / '\\"' / (c:[^"] {return c})
bstring = '[' s:cbstring* ']' {return s.join('')}
cbstring = special / '\\]' / (c:[^\]] {return c})
ident = ![0-9] c:[a-zA-Z0-9_$]+ {return c.join('')}
